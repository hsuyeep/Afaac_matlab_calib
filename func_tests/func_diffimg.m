% Script to generate image difference noise statistics
% Takes image domain differences, in time, using the timeseries of calibrated
% visibilities generated by wrcalvis2bin.m
% pep/20Jun13
% Arguments:
%	fname : Filename of the binary file containing the calibrated visibilities.
% posfname: Filename of the array configuration matrix, for imaging.
% ntslices: Number of timeslices on which to generate the temporal statistics.
% winsize : Split the total timeslices into winsize blocks. This allows looking
%			at long term statistics using windows of size winsize timeslices.
%			NOTE: CURRENTLY UNIMPLEMENTED.
% offset  : Number of records to skip in this file, before starting analysis.
% noisereg: [xbl, ybl, pix] region in pixel units over which noise statistics 
%			are computed. The region has a top left corner of (xbl,ybl), and is 
%			a square of side 'pix' pixels.

function func_diffimg (fname, posfname, offset, ntslices, winsize, noisereg)

	% Imaging parameters
    duv = 2.5;						% Default, reassigned from freq. of obs. to
									% image just the full Fov (-1<l<1)
    Nuv = 500; %1000                % size of gridded visibility matrix
    uvpad = 512; %1024              % specifies if any padding needs to be added


	thresh = 2;						% Sigma threshold to detect outlier pixels.
	if ntslices == -1
		[ntslices, tmin, tmax, dt] = getnrecs (fname);
		fprintf (1, 'Found %d timeslices at %f sec. resolution.\n', ...
				 ntslices, dt);
	end;

	tblks = int32(ntslices/winsize);% Time windows over which to generate stats.
	meantseries = zeros (1, winsize);
	sigtseries  = meantseries;
	meanmaptseries = zeros (1, winsize);
	sigmaptseries  = meantseries;
	cumulmapmean   = zeros (1, winsize);
	cumulmapvar    = zeros (1, winsize);
	cumuldiffmean  = zeros (1, winsize);
	cumuldiffvar   = zeros (1, winsize);

	fid = fopen (fname, 'rb');

	load (posfname, 'poslocal');
    uloc = meshgrid (poslocal(:,1)) - meshgrid (poslocal (:,1)).';
    vloc = meshgrid (poslocal(:,2)) - meshgrid (poslocal (:,2)).';
    wloc = meshgrid (poslocal(:,3)) - meshgrid (poslocal (:,3)).';

	% Move to desired file offset.
	if offset > 0
		[acc, tobs_first, freq] = readms2float (fid, offset, -1, 288);
	end;

	% Read in a calibrated ACM.
	[acc, img.tobs, img.freq] = readms2float (fid, 1, -1, 288);
	Nelem = size (acc, 1);

	lambda = 299792458/img.freq; 		% in m.
	% duv = lambda/2;
	% dimensionless, in dir. cos. units
    dl = (299792458/(img.freq * uvpad * duv)); 
    
    % NOTE: Total imaged Field of View is determined by the visibility 
	% grid-spacing, duv.
    lmax = dl * uvpad / 2;

	if (isempty (noisereg) == 1)
		% Default region for noise analysis is the inner quarter.
		xbl = 3*uvpad/8; ybl = 3*uvpad/8;
		xtr = 5*uvpad/8; ytr = 5*uvpad/8;
	else
		xbl = noisereg (1); ybl = noisereg(2);
		xtr = xbl + noisereg(3); ytr = ybl + noisereg(3);
	end;
	fprintf (1, 'Noise region: [bl:(%3d, %3d), tr: (%3d, %3d)]\n',  ...
			 xbl, ybl, xtr, ytr);

	% Generate the first image.
   	[radecmap, prevmap, calvis, img.l, img.m] = ... 
	  fft_imager_sjw_radec (acc(:), uloc(:), vloc(:), ... 
				duv, Nuv, uvpad, img.tobs, img.freq, 0);

	% Data structure for difference images
	diffimg  = zeros (uvpad, uvpad, ntslices-1); % Holds actual img differences
	sigdiff  = zeros (uvpad);    % Sum of x in the diff. image
	sigdiff2 = zeros (uvpad);    % Sum of x^2 in the diff. image
	mapsigdiff  = zeros (uvpad); % Sum of x in the raw image
	mapsigdiff2 = zeros (uvpad); % Sum of x^2 in the raw image

	mask = ones (uvpad);         % Mask generation, currently only for display
	mask (xbl:xtr, ybl) = 0;
	mask (xbl:xtr, ytr) = 0;
	mask (xbl, ybl:ytr) = 0;
	mask (xtr, ybl:ytr) = 0;
	
	% Single snapshot noise measurement
	mapnoisereg = prevmap (xbl:xtr, ybl:ytr);
	mmap = mean (mapnoisereg(:));
	vmap = std (mapnoisereg(:));
	imagesc ([xbl:xtr], [ybl:ytr], mapnoisereg); colorbar;
	title ('Chosen region for noise analysis within image');
	xlabel ('X-Pixel'); ylabel ('Y-Pixel');

	% Figure management
	diffhdl = figure;
	maphdl = figure;
	set(0,'Units','pixels') 
	scnsize = get(0,'ScreenSize');
	position = get(diffhdl,'Position');
	outerpos = get(diffhdl,'OuterPosition');
	borders = outerpos - position;
	edge = -borders(1)/2;
	% pos = [left bottom width height]
	pos1 = [edge, scnsize(4) * (1/2), scnsize(3)- edge, scnsize(4)/2];
	set(diffhdl,'OuterPosition',pos1);
	pos1 = [edge, 0, scnsize(3)- edge, scnsize(4)/2];
	set(maphdl,'OuterPosition',pos1);

	% Generate images, differences and second differences.
	for im = 2:winsize
		% Get next ACM timeslice.
		[acc, img.tobs, img.freq] = readms2float (fid, -1, 0, 288);

		% Generate image and difference image.
   		[radecmap, img.map, calvis, img.l, img.m] = ... 
		  fft_imager_sjw_radec (acc(:), uloc(:), vloc(:), ... 
					duv, Nuv, uvpad, img.tobs, img.freq, 0);

		diffimg (:,:, im-1) = real(img.map) - real(prevmap);

		% For pixel level running mean/var, generate integrated pixels.
		sigdiff  = sigdiff  + diffimg (:,:,im-1); 
		sigdiff2 = sigdiff2 + diffimg (:,:,im-1).^2;
		mapsigdiff = mapsigdiff + img.map;
		mapsigdiff2 = mapsigdiff2 + img.map.^2;

		% Determine mean/var of cumulative RAW and DIFF image till now.
		tmpreg = sigdiff (xbl:xtr, ybl:ytr)/(im-1); % The mean cumulative image.
		cumuldiffmean(im) = mean (tmpreg(:));   % Get mean over chosen region.
		cumuldiffvar (im) = std (tmpreg(:));    % Get std. over chosen region

		tmpreg = mapsigdiff (xbl:xtr, ybl:ytr)/(im-1); % Now for the RAW image.
		cumulmapmean(im) = mean (tmpreg(:));   % Get mean over chosen region.
		cumulmapvar (im) = std (tmpreg(:));    % Get std. over chosen region

		% Show input and difference images.
		% figure (diffhdl);
		% subplot (121);
		% imagesc (diffimg (:,:,im-1).*mask); colorbar;

		% Generate spatial noise stats over selected region, within the snapshot
		% diff image noise
		noisemap = diffimg (xbl:xtr, ybl:ytr, im-1);
		meantseries (im) = mean (noisemap(:)); 
		sigtseries  (im) = std  (noisemap(:));
		% raw image noise
		mapnoisereg = img.map (xbl:xtr, ybl:ytr);
		meanmaptseries (im) = mean (mapnoisereg(:));
		sigmaptseries  (im) = std  (mapnoisereg(:));

%		noisemin = min (noisemap(:));  noisemax = max (noisemap(:));
%		fprintf (1, ... 
%		'[Min, Max, rng, mean, var] = %6.1f, %6.1f, %6.1f %6.3f, %6.1f\n', ...
%				 noisemin, noisemax, noisemax-noisemin,  m, v);

		% Print number of pixels above 3sigma in map, and their locations
		% This can help check correspondence with sources;
		outliermap = zeros (uvpad);
		outliermap ((noisemap > thresh*sigtseries(im))) = 1;

		% Show difference image and histogram over chosen region.
		figure (diffhdl);
		subplot (121); imagesc (diffimg (:,:,im-1).*mask); colorbar;
		subplot (122); hist (noisemap(:), 100);

		% Show raw image and histogram over chosen region.
		figure (maphdl);
		subplot (121); imagesc (img.map.*mask); colorbar;
		subplot (122); hist (mapnoisereg(:), 100);
		axis ('tight');

		% imagesc (outliermap); colorbar;
		prevmap = img.map;
	end;
	% Generate labels for the RT-plots
	figure (diffhdl); 
	subplot (121); xlabel ('X-Pixel'); ylabel ('Y-Pixel');
	title ('1-timeslice difference image');
	subplot (122); xlabel ('Pixel value'); ylabel ('Counts');
	title ('Noise region pixel histogram');
	figure (maphdl); 
	subplot (121); xlabel ('X-Pixel'); ylabel ('Y-Pixel');
	title ('1-timeslice map');
	subplot (122); xlabel ('Pixel value'); ylabel ('Counts');
	title ('Noise region pixel histogram');

	% Generate per pixel noise stats across time.
	% mean per pixel.
	meanperpix = sigdiff/(winsize-1);
	sigperpix  = sqrt (sigdiff2/(winsize-1) - meanperpix.^2);
	mapmeanperpix = mapsigdiff/(winsize-1);
	mapsigperpix  = sqrt (mapsigdiff2/(winsize-1) - mapmeanperpix.^2);
	
	% Figure management
	stathdl = figure;
	set(0,'Units','pixels') 
	scnsize = get(0,'ScreenSize');
	position = get(stathdl,'Position');
	outerpos = get(stathdl,'OuterPosition');
	borders = outerpos - position;
	edge = -borders(1)/2;
	% pos = [left bottom width height]
	pos1 = [edge, 0, scnsize(3)-edge, scnsize(4)];
	set(stathdl,'OuterPosition',pos1);

	subplot (221);
	imagesc (meanperpix); colorbar;
	xlabel ('X-Pixel'); ylabel ('Y-Pixel');
	title ('DIFF image mean per pixel');
	subplot (222);
	imagesc (sigperpix); colorbar;
	xlabel ('X-Pixel'); ylabel ('Y-Pixel');
	title ('DIFF image variance per pixel');
	subplot (223);
	imagesc (mapmeanperpix); colorbar;
	xlabel ('X-Pixel'); ylabel ('Y-Pixel');
	title ('RAW image mean per pixel');
	subplot (224);
	imagesc (mapsigperpix); colorbar;
	xlabel ('X-Pixel'); ylabel ('Y-Pixel');
	title ('RAW image variance per pixel');

	% Print histogram of integrated raw image and diff image.
	figure;
	% Chosen region in integrated noise map.
	noisemap = meanperpix (xbl:xtr, ybl:ytr); 
	subplot (121);
	hist (noisemap(:), 100);
	xlabel ('Pixel value'); ylabel ('Counts');
	title ('Integrated DIFF image histogram over chosen region');
	mapnoisereg = mapmeanperpix (xbl:xtr, ybl:ytr);
	subplot (122);
	hist (mapnoisereg(:), 100);
	xlabel ('Pixel value'); ylabel ('Counts');
	title ('Integrated RAW image histogram over chosen region');
	
	% Plot mean and variance timeseries over this window for both diff and raw 
	% maps.
	figure;
	subplot (221);
	plot (meantseries, '*r');
	xlabel ('Timeslices'); ylabel ('Pixel value');
	title (sprintf ('Mean DIFF image noise in chosen region, over %d timeslices', ...
					 winsize));
	subplot (222);
	plot (sigtseries, '*r');
	xlabel ('Timeslices'); ylabel ('Pixel value');
	title (sprintf ('DIFF image noise std in chosen region, over %d timeslices', ...
					 winsize));
	subplot (223);
	plot (meanmaptseries, '*r');
	xlabel ('Timeslices'); ylabel ('Pixel value');
	title (sprintf ('Mean RAW image noise in chosen region, over %d timeslices', ...
					winsize));
	subplot (224);
	plot (sigmaptseries, '*r');
	xlabel ('Timeslices'); ylabel ('Pixel value');
	title (sprintf ('RAW noise std in chosen region, over %d timeslices', winsize));

	% Plot noise variance as a function of integration of both RAW and DIFF
	% images.
	figure;
	subplot (221);
	plot (cumulmapmean, 'r*');
	xlabel ('Integrated time'); ylabel ('Mean pixel value');
	title ('Raw image mean at different time integrations');
	subplot (222);
	plot (cumulmapvar, 'r*');
	xlabel ('Integrated time'); ylabel ('std. pixel value');
	title ('Raw image std. at different time integrations');
	subplot (223);
	plot (cumuldiffmean, 'b*');
	xlabel ('Integrated time'); ylabel ('Mean pixel value');
	title ('Diff image mean at different time integrations');
	subplot (224);
	plot (cumuldiffvar, 'b*');
	xlabel ('Integrated time'); ylabel ('std. pixel value');
	title ('Diff image std. at different time integrations');
	

	

	% Print number of pixels above 3sigma in map, and their locations
	% This can help check correspondence with sources;
	% TODO
