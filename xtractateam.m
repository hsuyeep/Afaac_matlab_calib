% Script to extract out the flux of the Ateam sources from a series of images,
% as generated by wrimg2bin.m
% pep/08Mar15
% Arguments:
%    fname  : image binary file name, as generated by genfftimage.m
%    srcsize: size of square region in which to search for source peak.
%    offset : The record offset from which to start showing images.
%    skip   : Skip some number of images.
%    nrecs  : Number of images to show. -1 => show all images.
%    deb    : Generate plots/images of selected areas containing the point
%             sources.
% Returns:
%    pwr    : Total power of Cas.A and Cyg.A
%    pwr_ts : Times corresponding to observed power, mjdsec

function [pwr, pwr_ts] = xtractateam (fname, srcsize, offset, skip, nrecs, deb)
	try
		fid = fopen (fname, 'rb');
	catch err
		getReport(err);
	end;
	
	k = strfind (fname, '.bin');
	xtractfname = sprintf ('%s.ateam.txt', fname(1:k-1));
	fout = fopen (xtractfname, 'wt');
	fprintf (1, '<-- Writing output to file %s.\n', xtractfname);
	fprintf (fout, '# time(mjdsec) srcpwr cat_l cat_m peak_l peak_m\n');
	load ('srclist3CR.mat');
    cs002_lat = 52.915122495;
    cs002_lon = 6.869837540;
    cs002_normal  = [0.598753, 0.072099, 0.797682].'; % Normal to CS002
    
    ateam_ind =  [324, 283]; % , 88, 179]; 
    nsrc = length (ateam_ind);
	if (fid < 0)
		disp ('showbinimages: fid < 0! Quitting.');
		return;
	end;

    finfo = dir (fname);
    % Read in first record for image parameters.
	img = readimg2bin (fid, 0);
    
    % NOTE that getting the size of a structured variable does not work like this...
	% tmp = whos ('img');
	% recsize = tmp.bytes;
	% NOTE: Hardcoded size of img constituents!
	recsize = 8 + ... % Frequency of image (double)
			  4 + ... % img.pix2laxis (float)
			  4*img.pix2laxis + ... % l axis values (floats)
			  4 + ... % img.pix2maxis (float)
			  4*img.pix2maxis + ... % m axis values (floats)
			  4*img.pix2maxis*img.pix2laxis; % Image pixel values (floats)
	
    recs2file = int32(finfo.bytes/recsize);
    fprintf (1, '<-- Found %d records\n.', recs2file);
	if (nrecs < 0)
		nrecs = recs2file;
	end;

	if (srcsize == 0)
		srcsize = 5;
	end;

    if (offset > recs2file | nrecs < recs2file)
        fprintf (2, '### offset > recs2file or nrecs < recs2file!\n');
        return;
    end;
    
	if (offset > 1)
		fprintf (2, 'Moving to image offset %d\n', offset);		
		% fseek didn't work, see showbinimages.m
        try
            for ind = 1:offset
            	img = readimg2bin (fid, 0);
            end;
        catch err
            fprintf (2, '### Error in seeking:%s.\n', getReport(err));
            fclose (fid);
            return;
        end;    
	end;

	% Do for all records in mon_tseriesfile, else the specified nrecs.
	if (nrecs < 0)
		fdir = dir (fname);
		filesize = fdir.bytes;
		imgwhos = whos ('img');
		imgsize = imgwhos.bytes;
		nrecs = filesize/imgsize;
	end;

    pwr_ts = zeros (nrecs, 1);
    pwr = zeros (nrecs, nsrc, 5);
    if (deb > 0)
        debimg = figure;
    end;
	for im = 1+offset:offset+nrecs
        try
            img = readimg2bin (fid, skip);
        catch err
            fprintf (2, '### Error in seeking: %s\n', getReport (err));            
            break;
        end;
		map = reshape (img.map, img.pix2laxis, img.pix2maxis);
		jd = img.tobs/86400. + 2400000.5;
		[ateaml, ateamm] = radectolm ([srclist3CR(ateam_ind).alpha], [srclist3CR(ateam_ind).delta], jd, cs002_lon, cs002_lat, false); 
		colpix = int32((1+ateaml)*img.pix2laxis/2 + 1); 
		rowpix = int32((1+ateamm)*img.pix2maxis/2 + 1); 
	
		% Assertion
		if (colpix > length(img.map) | colpix < 0)
			fprintf (2,'### Assertion failed: src position beyond map boundary.\n');
		end;
	
		if (rowpix > length(img.map) | rowpix < 0)
			fprintf (2,'### Assertion failed: src position beyond map boundary.\n');
		end;
	
		% Power integrated over the specified source size (in pixels)
		% We create an island of pixels for each source, with intensities going down 
		% to half power
        pwr_ts (im) = img.tobs;
		fprintf (fout, '%.1f ', pwr_ts(im));
		for src = 1:nsrc
			% peakpwr = img.map(rowpix(src), colpix(src));
			imgcut = img.map(rowpix(src)-srcsize:rowpix(src)+srcsize, colpix(src)-srcsize:colpix(src)+srcsize);
            [colmax, rowind] = max (imgcut);
            [peakpwr, colind] = max(colmax);
            mask = find (imgcut(:) > peakpwr/2);
            
            pwr (im, src, 1) = sum (imgcut(mask));            
            pwr (im, src, 2) = rowpix(src);
            pwr (im, src, 3) = colpix(src);
            pwr (im, src, 4) = rowind (colind);
            pwr (im, src, 5) = colind;
			fprintf (fout, '%.2f %4d %4d %4d %4d ', ...
					 pwr(im,src,1), pwr(im,src,2), pwr(im, src, 3), pwr(im, src, 4), pwr(im, src, 5)); 
			if (deb > 0)
                figure (debimg)
                subplot (nsrc,2,2*(src-1)+1);
                imagesc (imgcut); title (srclist3CR(ateam_ind(src)).name);
                subplot (nsrc,2,2*(src-1)+2);
                pltmask = zeros (size(imgcut));
                pltmask(mask)  = 1;
                imagesc (pltmask); title (num2str (int32(img.tobs)));           
                % pause;
            end;
		end;
		fprintf (fout, '\n');
	end;

	fprintf (2, '<-- Operated on %d images.\n', im);
    if (fid > 0) fclose (fid); end;   
	if (fout > 0) fclose (fout); end;
